// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);








//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clock;
pll pll0 (MAX10_CLK1_50, clock);
//assign clock = KEY[1];

wire [15:0] A_cpu;
wire [7:0] Di_cpu;
wire [7:0] Do_cpu;
wire wr_cpu;
wire rd_cpu;

wire [15:0] A_ram;
wire [7:0] Di_ram;
wire [7:0] Do_ram;
wire rd_ram;
wire wr_ram;

wire [15:0] A_ppu;
wire [7:0] Di_ppu;
wire [7:0] Do_ppu;
wire cs_ppu;
wire rd_ppu;
wire wr_ppu;

wire [15:0] A_vram;
wire [7:0] Di_vram;
wire [7:0] Do_vram;
wire rd_vram;
wire wr_vram;

wire [15:0] A_oam;
wire [7:0] Di_oam;
wire [7:0] Do_oam;
wire rd_oam;
wire wr_oam;

wire [15:0] A_oamram;
wire [7:0] Di_oamram;
wire [7:0] Do_oamram;
wire rd_oamram;
wire wr_oamram;

wire [15:0] A_wsram;
wire [7:0] Di_wsram;
wire [7:0] Do_wsram;
wire rd_wsram;
wire wr_wsram;

wire [15:0] A_highram;
wire [7:0] Di_highram;
wire [7:0] Do_highram;
wire rd_highram;
wire wr_highram;

wire [15:0] A_crd;
wire [7:0] Di_crd;
wire [7:0] Do_crd;
wire rd_crd;
wire wr_crd;

wire IRQVBlank;

//debug
wire [7:0] A;
wire [7:0] B;
wire [7:0] C;
wire [7:0] D;
wire [7:0] E;
wire [7:0] F;
wire [7:0] H;
wire [7:0] L;
wire [15:0] PC;
wire [15:0] SP;

wire clk;
pixelclk pixelclk0(MAX10_CLK1_50, clk);

B2HConv conv5((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? F[3:0] : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? C[3:0] : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? E[3:0] : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? L[3:0] : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? PC[3:0]   : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? SP[3:0] : 4'b0000, HEX0);
B2HConv conv4((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? F[7:4] : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? C[7:4] : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? E[7:4] : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? L[7:4] : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? PC[7:4]   : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? SP[7:4] : 4'b0000, HEX1);
B2HConv conv3((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? A[3:0] : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? B[3:0] : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? D[3:0] : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? H[3:0] : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? PC[11:8]  : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? SP[11:8] : 4'b0000, HEX2);
B2HConv conv2((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? A[7:4] : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? B[7:4] : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? D[7:4] : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? H[7:4] : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? PC[15:12] : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? SP[15:12] : 4'b0000, HEX3);
RegName2HConv conv1((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0001 : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0011 : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0101 : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? 4'b0111 : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? 4'b0011 : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? 4'b1000 : 4'b1010, 1'b0, HEX4);
RegName2HConv conv0((SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0000 : (~SW[0] && SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0010 : (~SW[0] && ~SW[1] && SW[2] && ~SW[3] && ~SW[4] && ~SW[5]) ? 4'b0100 : (~SW[0] && ~SW[1] && ~SW[2] && SW[3] && ~SW[4] && ~SW[5]) ? 4'b0110 : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && SW[4] && ~SW[5]) ? 4'b1000 : (~SW[0] && ~SW[1] && ~SW[2] && ~SW[3] && ~SW[4] && SW[5]) ? 4'b1011 : 4'b1010, 1'b1, HEX5);



ram ram0 (
	A_ram,
	clock,
	Di_ram,
	rd_ram,
	wr_ram,
	Do_ram
);
   
vram vram0 (
	A_vram,
	clock,
	Di_vram,
	rd_vram,
	wr_vram,
	Do_vram
);
	
 oamram oamram0 (
	A_oamram,
	clock,
	Di_oamram,
	rd_oamram,
	wr_oamram,
	Do_oamram
);
	
wsram wsram(
	A_wsram,
   clock,
	Di_wsram,
	rd_wsram,
	wr_wsram,
   Do_wsram
);   
 
highram0 hram0(
	A_highram,
   clock,
	Di_highram,
	rd_highram,
	wr_highram,
   Do_highram
);


	
ramtest programtest (
	A_crd,
	clock,
	Di_crd,
	rd_crd,
	1'b0,
	Do_crd
);
	
mmu mmu (

	//Cpu 0000-FFFF
	A_cpu,
	Di_cpu,
	Do_cpu,
	wr_cpu,
	rd_cpu,
	
	//Cartridge 0000-7FFF & A000-BFFF
	A_crd,
	Di_crd,
	Do_crd,
	,
	wr_crd,
	rd_crd,
   
   //PPU 8000-9FFF & FE00-FE9F & FF40-FF4B
	A_ppu,
	Di_ppu,
	Do_ppu,
	cs_ppu,
	wr_ppu,
	rd_ppu,

//	//VRAM 8000-9FFF
//	A_vram,
//	Di_vram,
//	Do_vram,
//	,
//	wr_vram,
//	rd_vram,
//	
//	//OAM FE00-FE9F
//	A_oamram,
//	Di_oamram,
//	Do_oamram,
//	,
//	wr_oamram,
//	rd_oamram,
	
	//RAM C000-DFFF
	A_ram,
	Di_ram,
	Do_ram,
	,
	wr_ram,
	rd_ram,
	
	//Working & Stack RAM FF80-FFFE
	A_wsram,
	Di_wsram,
	Do_wsram,
	,
	wr_wsram,
	rd_wsram
	
);

oam oam0(
   1'b0,
   
   A_oam,
   Di_oam,
   Do_oam,
   wr_oam,
   rd_oam,
   
   ,
   ,
   ,
   ,
   ,
   
   A_oamram,
   Do_oamram,
   Di_oamram,
   wr_oamram,
   rd_oamram
   
);

ppu ppu0(

   clock,

   A_ppu,
   Do_ppu,
   Di_ppu,
   cs_ppu,
   wr_ppu,
   rd_ppu,
   
   A_vram,
   Di_vram,
   Do_vram,
   wr_vram,
   rd_vram,
   
   A_oam,
   Di_oam,
   Do_oam,
   wr_oam,
   rd_oam,
   
   IRQVBlank,
   
   clk,
   VGA_HS,
   VGA_VS,
   VGA_R,
   VGA_G,
   VGA_B

);


cpu cpu0 (

	clock,
	~KEY[0],
	A_cpu,
	Di_cpu,
	Do_cpu,
   ,
	wr_cpu,
	rd_cpu,
   A_highram,
   Do_highram,
   Di_highram,
   ,
   wr_highram,
   rd_highram,
   ,
   ,
   ,
   ,
   IRQVBlank,

	A,
	B,
	C,
	D,
	E,
	F,
	H,
	L,
	PC,
	SP

);




//=======================================================
//  Structural coding
//=======================================================



endmodule
